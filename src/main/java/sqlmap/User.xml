<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace命名空间，为了对sql语句进行隔离，方便管理,mapper开发dao模式，使用namespace有特殊作用 -->
<mapper namespace="test">
	<!-- 根据id查询用户信息，id唯一标识一个statement，#{}表示一个占位符
		  如果#{}中传入简单类型的参数，#{}中的名称随意
		 parameterType：输入参数的类型，通过#{}接收parameterType输入的参数
		 resultType：输出结果类型，不管返回单条还是多条，指定单条映射记录的pojo类型
	 -->
	<select id="findUserById" parameterType="int" resultType="com.cike.po.User">
		select * from user where id = #{id}
	</select>
	<!-- 根据用户名称模糊查询用户信息，可能返回多条
		${}：表示sql的拼接，通过${}接收参数，将参数的内容不加任何修饰拼接在sql中，不能防止sql注入。
		select * from user where username like '%${value}%'
	 -->
	<select id="findUserByName" parameterType="java.lang.String" resultType="com.cike.po.User">
		select * from user where username like #{username}
	</select>
	<!-- 添加用户
		#{}接收pojo数据，可以使用OGNL解析出pojo属性值
		selectKey：用于进行主键返回，定义了获取主键值的sql
		order：设置selectKey中sql执行顺序，相对于insert语句来说
		resultType：select LAST_INSERT_ID()的结果类型
		keyProperty：将主键设置到哪个属性
	 -->
	<insert id="insertUser" parameterType="com.cike.po.User">
		<selectKey keyProperty="id" order="AFTER" resultType="int">
			select LAST_INSERT_ID()
		</selectKey>
		INSERT INTO user(username,birthday,sex,address) VALUES(#{username},#{birthday},#{sex},#{address});
	</insert>
	<!-- 用户删除 -->
	<delete id="deleteUser" parameterType="int">
		delete from user where id = #{id}
	</delete>
	<!-- 用户修改 -->
	<update id="updateUser" parameterType="com.cike.po.User">
		update user set username=#{username},birthday=#{birthday},sex=#{sex},address=#{address} where id=#{id}
	</update>
</mapper>